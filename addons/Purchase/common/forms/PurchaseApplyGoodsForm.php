<?php

namespace addons\Purchase\common\forms;

use Yii;
use addons\Style\common\enums\QibanTypeEnum;
use addons\Purchase\common\models\PurchaseApplyGoodsAttribute;
use addons\Style\common\models\AttributeSpec;
use addons\Style\common\models\StyleAttribute;
use addons\Style\common\enums\JintuoTypeEnum;
use common\enums\InputTypeEnum;
use common\enums\ConfirmEnum;
use addons\Purchase\common\models\PurchaseApplyGoods;
use addons\Purchase\common\enums\PurchaseGoodsTypeEnum;

/**
 * 款式编辑-款式属性 Form
 *
 * @property string $attr_require 必填属性
 * @property string $attr_custom 选填属性
 */
class PurchaseApplyGoodsForm extends PurchaseApplyGoods
{
    //属性必填字段
    public $attr_require;
    //属性非必填
    public $attr_custom;
    
    public $attr;

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        $rules = [
                [['attr_require'], 'required','isEmpty'=>function($value){
                    if(!empty($value)) {
                        foreach ($value as $k=>$v) {
                            if($v === "") {
                                $name = \Yii::$app->attr->attrName($k);
                                $this->addError("attr_require[{$k}]","[{$name}]不能为空");
                                return true;
                            }
                        }
                        return false;
                    }
                    return false;
                }],
                [['attr_require','attr_custom'],'getPostAttrs'],
        ];
        return array_merge(parent::rules() , $rules);
    }
    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        //合并
        return parent::attributeLabels() + [
                'attr_require'=>'当前属性',
                'attr_custom'=>'当前属性',
        ];
    }


    public function beforeValidate()
    {

        //版式视频
        $goods_video = $this->goods_video;
        if(is_array($goods_video)){
            $this->goods_video = implode(',',$goods_video);
        }


        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }
    /**
     * 款式基础属性
     */
    public function getPostAttrs()
    {
        $attr_list = [];
        if($this->attr_require){
            $attr_list =  $this->attr_require + $attr_list;
        }
        if($this->attr_custom){
            $attr_list =  $this->attr_custom + $attr_list;
        }
        return $attr_list;
    }
    /**
     * 初始化 已填写属性数据
     */
    public function initAttrs()
    {
        $models = PurchaseApplyGoodsAttribute::find()->select(['attr_id','input_type','if(attr_value_id=0,attr_value,attr_value_id) as attr_value'])->where(['id'=>$this->id])->all();
        if(empty($models)) {
            return ;
        }
        $attr_list = [];
        foreach ($models as $model){
            $attr_values = $model->attr_value;

            if($model->input_type != InputTypeEnum::INPUT_TEXT) {
                $split_values = explode(",",$attr_values);
                if(count($split_values) > 1) {
                    $attr_values = $split_values;
                }
            }
            $attr_list[$model->attr_id] = $attr_values;
        }
        $this->attr_custom  = $attr_list;
        $this->attr_require = $attr_list;
    }

    /**
     * 初始化 已填写属性数据
     */
    public function initApplyEdit()
    {
        $attr_list = PurchaseApplyGoodsAttribute::find()->select(['attr_id','if(attr_value_id=0,attr_value,attr_value_id) as attr_value'])->where(['id'=>$this->id])->asArray()->all();
        if(!empty($attr_list)) {
            $attr_list = array_column($attr_list,'attr_value','attr_id');
        }
        if($this->is_apply == 0) {
            $this->apply_info = [];
        }else if(!is_array($this->apply_info)) {
            $this->apply_info  = json_decode($this->apply_info,true) ?? [];
        }

        foreach ($this->apply_info as $k=>$item) {
            $group = $item['group'];
            $code  = $item['code'];
            $label = $item['label'];
            $value = $item['value'];
            if($group == 'base') {
                $this->$code = $value;
            }else if($group == 'attr'){
                $value = $item['value_id'];
                $attr_list[$code] = $value;
            }
        }
        $this->attr_custom  = $attr_list;
        $this->attr_require = $attr_list;
        
    }
    /**
     * 初始化 申请表单数据
     */
    public function initApplyView()
    {
        $apply_info = array();
        if(!$this->apply_info) {
            return ;
        }
        $attrs = PurchaseApplyGoodsAttribute::find()->select(['attr_id','attr_value','if(attr_value_id=0,attr_value,attr_value_id) as attr_value2'])->where(['id'=>$this->id])->asArray()->all();
        $attrs = array_column($attrs,'attr_value','attr_id');
        
        $this->apply_info  = json_decode($this->apply_info,true) ?? [];
        
        foreach ($this->apply_info as $k=>$item) {
            $group = $item['group'];
            $code  = $item['code'];
            $value = $item['value'];
            $label = $item['label'];
            if($group == 'base') {
                $org_value = $this->$code;
            }else if($group == 'attr'){
                $org_value= $attrs[$code] ?? '';
            }else {
                $org_value = '';
            }
            $apply_info[$code] = ['label'=>$label,'value'=>$value,'org_value'=>$org_value,'changed'=>($value != $org_value)];
        }
        $this->apply_info = $apply_info;
        
    }
    /**
     * 创建商品属性
     */
    public function  createAttrs()
    {
        PurchaseApplyGoodsAttribute::deleteAll(['id'=>$this->id]);
        foreach ($this->getPostAttrs() as $attr_id => $attr_value_id) {
            $spec = AttributeSpec::find()->where(['attr_id'=>$attr_id,'style_cate_id'=>$this->style_cate_id])->one();
            $model = new PurchaseApplyGoodsAttribute();
            $model->id = $this->id;
            $model->attr_id  = $attr_id;
            $model->input_type = $spec->input_type;

            if(InputTypeEnum::isText($spec->input_type)) {
                $model->attr_value_id  = '0';
                $model->attr_value = (string)$attr_value_id;
            }else if(is_numeric($attr_value_id)){
                $attr_value = \Yii::$app->attr->valueName($attr_value_id);
                $model->attr_value_id  = (string)$attr_value_id;
                $model->attr_value = (string)$attr_value;
            }else if(is_array($attr_value_id)){
                $attr_value_arr = [];
                foreach ($attr_value_id as $attr_id){
                    $attr_value_arr[] = \Yii::$app->attr->valueName($attr_id);
                }
                $model->attr_value_id = implode(',',$attr_value_id);
                $model->attr_value = implode(',',$attr_value_arr);
            }else{
                continue;
            }
            $model->sort = $spec->sort;
            if(false === $model->save()) {
                throw new \Exception($this->getErrors($model));
            }
        }
    }
    /**
     * 采购商品申请编辑-创建
     */
    public function createApply()
    {
        //主要信息
        $fields = array('goods_name','cost_price','goods_num');
        $apply_info = array();
        foreach ($fields as $field) {
            $apply_info[] = array(
                    'code'=>$field,
                    'value'=>$this->$field,
                    'label'=>$this->getAttributeLabel($field),
                    'group'=>'base',
            );
        }
        //属性信息
        foreach ($this->getPostAttrs() as $attr_id => $attr_value_id) {
            $spec = AttributeSpec::find()->where(['attr_id'=>$attr_id,'style_cate_id'=>$this->style_cate_id])->one();
            
            if(InputTypeEnum::isText($spec->input_type)) {
                $value_id = 0;
                $value = $attr_value_id;
            }else if(is_numeric($attr_value_id)){
                $value_id = $attr_value_id;
                $value = Yii::$app->attr->valueName($attr_value_id);
            }else{
                $value_id = null;
                $value = null;
            }
            $apply_info[] = array(
                    'code' => $attr_id,
                    'value' => $value,
                    'value_id'=>$attr_value_id,
                    'label' => Yii::$app->attr->attrName($attr_id),
                    'group' =>'attr',
            );
        }
        //其它信息
        $fields = array('stone_info','parts_info','remark');
        foreach ($fields as $field) {
            $apply_info[] = array(
                    'code'=>$field,
                    'value'=>$this->$field,
                    'label'=>$this->getAttributeLabel($field),
                    'group'=>'base',
            );
        }
        $this->is_apply   = ConfirmEnum::YES;
        $this->apply_info = json_encode($apply_info);
        if(false === $this->save(true,['is_apply','apply_info','updated_at'])) {
            throw new \Exception("保存失败",500);
        }
        
    }
    /**
     * 获取款式属性列表
     * 
     * @return array|\yii\db\ActiveRecord[]
     */
    public function getAttrList()
    {
        $attr_type = JintuoTypeEnum::getValue($this->jintuo_type,'getAttrTypeMap');
        if($this->goods_type == PurchaseGoodsTypeEnum::OTHER) {
            $attr_list = \Yii::$app->styleService->attribute->getAttrListByCateId($this->style_cate_id,$attr_type,$this->is_inlay);
        }else if($this->goods_type == PurchaseGoodsTypeEnum::STYLE) {
            $attr_list = \Yii::$app->styleService->styleAttribute->getStyleAttrList($this->style_id, $attr_type);
        }else{
            $attr_list = \Yii::$app->styleService->qibanAttribute->getQibanAttrList($this->style_id, $attr_type);
        }
        return $attr_list;
    }


    //去掉属性
    public function getAttrType($type){
        switch ($type){
            case 'require':
                $attr = [
                    10,77
                ];
                break;
            case 'remove':
                $attr = [
                    58,31
                ];
                break;
            case 'base':
                $attr = [
                    10,11,77,91,78,38,53,75,86,83,43,42,90,57,81,48
                ];
                break;
            case 'stone':
                $attr = [
                    56,65,59,6,7,2,4,28,29,8,87
                ];
                break;
            case 'second_stone':
                $attr = [
                    60,45,44,84,46,47,97,88,64,62,63,85,106,104,98,103,102,101,107,105
                ];
                break;
            case 'other':
                $attr = [];
                break;
            default: $attr = [];
        }
        return $attr;

    }





    
}
